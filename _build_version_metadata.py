# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

"""Custom build backend wrapper to ensure version generation."""

import os
import sys
import re
import logging
from pathlib import Path

# Import the original backend
from scikit_build_core.build import *  # noqa: F401, F403
from scikit_build_core.build import build_wheel as _orig_build_wheel
from scikit_build_core.build import build_sdist as _orig_build_sdist
from scikit_build_core.build import build_editable as _orig_build_editable
from scikit_build_core.build import get_requires_for_build_wheel as _orig_get_requires_for_build_wheel
from scikit_build_core.build import prepare_metadata_for_build_wheel as _orig_prepare_metadata_for_build_wheel

logging.basicConfig(level=logging.INFO)


def _get_version():
    """Get version using setuptools-scm, VERSION and clean it up"""
    try:
        with open("VERSION", "r") as vf:
            base_version = vf.read().strip()
    except FileNotFoundError:
        base_version = "0.0.0"

    try:
        import setuptools_scm

        version = setuptools_scm.get_version(root=".")

        # Remove the .dYYYYMMDD timestamp if present
        # Convert "0.7.1.dev36+g6e2360d69.d20250926" to "0.7.1.dev36+g6e2360d69"
        version = re.sub(r"\.d\d{8}", "", version)

        # Use the value in VERSION as the base version
        # Change to "0.7.0.dev36+g6e2360d69"
        version = re.sub(r"^[0-9]+\.[0-9]+\.[0-9]+", base_version, version)

        logging.info(f"Generated version with setuptools-scm: {version}")
        return version
    except Exception as e:
        logging.warning(f"setuptools-scm failed: {e}, using fallback")
        return base_version + "+unknown"


def _generate_version_file():
    """Generate _version.py file using setuptools-scm"""
    version = _get_version()

    # Write version file
    version_file = Path("python/mscclpp/_version.py")
    version_file.parent.mkdir(parents=True, exist_ok=True)

    with open(version_file, "w") as f:
        f.write(f"# Generated by build backend\n")
        f.write(f'__version__ = "{version}"\n')
        f.write(f'version = "{version}"\n')

    logging.info(f"Wrote version {version} to {version_file}")

    # Also write a metadata file that scikit-build-core can read
    metadata_file = Path("python/mscclpp/PKG-INFO")
    metadata_file.parent.mkdir(parents=True, exist_ok=True)
    with open(metadata_file, "w") as f:
        f.write(f"Metadata-Version: 2.1\n")
        f.write(f"Name: mscclpp\n")
        f.write(f"Version: {version}\n")

    # Set environment variable for scikit-build-core
    os.environ["SETUPTOOLS_SCM_PRETEND_VERSION"] = version

    return version


def get_requires_for_build_wheel(config_settings=None):
    """Get requirements with version generation"""
    _generate_version_file()
    return _orig_get_requires_for_build_wheel(config_settings)


def prepare_metadata_for_build_wheel(metadata_directory, config_settings=None):
    """Prepare metadata with version generation"""
    version = _generate_version_file()

    # Call original function
    result = _orig_prepare_metadata_for_build_wheel(metadata_directory, config_settings)

    # Patch the metadata with correct version
    import configparser

    metadata_file = Path(metadata_directory) / f"{result}/METADATA"
    if metadata_file.exists():
        with open(metadata_file, "r") as f:
            content = f.read()

        # Replace version line
        lines = content.split("\n")
        for i, line in enumerate(lines):
            if line.startswith("Version:"):
                lines[i] = f"Version: {version}"
                break

        with open(metadata_file, "w") as f:
            f.write("\n".join(lines))

    return result


def build_wheel(wheel_directory, config_settings=None, metadata_directory=None):
    """Build wheel with version generation"""
    version = _generate_version_file()

    # Set version in environment for scikit-build-core to pick up
    os.environ["SETUPTOOLS_SCM_PRETEND_VERSION"] = version

    return _orig_build_wheel(wheel_directory, config_settings, metadata_directory)


def build_sdist(sdist_directory, config_settings=None):
    """Build sdist with version generation"""
    version = _generate_version_file()
    os.environ["SETUPTOOLS_SCM_PRETEND_VERSION"] = version
    return _orig_build_sdist(sdist_directory, config_settings)


def build_editable(wheel_directory, config_settings=None, metadata_directory=None):
    """Build editable with version generation"""
    version = _generate_version_file()
    os.environ["SETUPTOOLS_SCM_PRETEND_VERSION"] = version
    return _orig_build_editable(wheel_directory, config_settings, metadata_directory)
