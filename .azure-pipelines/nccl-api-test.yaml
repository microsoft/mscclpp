trigger:
- main

pr:
  branches:
    include:
    - main
  drafts: false

jobs:
- job: NcclTest
  displayName: Run MSCCLPP over NCCL Test
  strategy:
    matrix:
      cuda11:
        containerImage: ghcr.io/microsoft/mscclpp/mscclpp:base-dev-cuda11.8
      cuda12:
        containerImage: ghcr.io/microsoft/mscclpp/mscclpp:base-dev-cuda12.4
  pool:
    name: msccl-ci
  container:
    image: $[ variables['containerImage'] ]

  steps:
  - checkout: self
  - checkout: git://One/msccl-users
  # - task: Bash@3
  #   name: Build
  #   displayName: Build
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       mkdir build && cd build
  #       cmake -DCMAKE_BUILD_TYPE=Release -DMSCCLPP_BYPASS_GPU_CHECK=ON -DMSCCLPP_USE_CUDA=ON ..
  #       make -j
  #     workingDirectory: '$(System.DefaultWorkingDirectory)/mscclpp'
  
  - task: DownloadSecureFile@1
    name: SshKeyFile
    displayName: Download key file
    inputs:
      secureFile: mscclpp-ssh.key

  - task: Bash@3
    name: InstallPackages
    displayName: Install Packages
    inputs:
      targetType: 'inline'
      script: |
        sudo apt-get update -y
        sudo apt-get install pssh -y
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

  - task: AzureCLI@2
    name: StartVMSS
    displayName: Start VMSS
    inputs:
      azureSubscription: mscclpp-ci
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az vmss start --name mscclpp-ci --resource-group mscclpp

  - task: Bash@3
    name: DeployTestEnv
    displayName: Deploy Test Env
    inputs:
      targetType: filePath
      filePath: mscclpp/test/deploy/deploy.sh
      arguments: "nccl-single"
      workingDirectory: $(System.DefaultWorkingDirectory)/mscclpp

  # - task: Bash@3
  #   name: CloneMscclUsers
  #   displayName: Clone msccl-users
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       set -e
  #       HOSTFILE=$(System.DefaultWorkingDirectory)/test/mscclpp-test/deploy/hostfile_ci
  #       SH_OPTION="StrictHostKeyChecking=no"
  #       KeyFilePath=${SSHKEYFILE_SECUREFILEPATH}
  #       rm -rf ci-output
  #       touch ci-output
  #       tail -f ci-output &
  #     workingDirectory: '$(System.DefaultWorkingDirectory)'

  - task: AzureCLI@2
    name: StopVMSS
    displayName: Deallocate VMSS
    condition: always()
    inputs:
      azureSubscription: mscclpp-ci
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az vmss deallocate --name mscclpp-ci --resource-group mscclpp
